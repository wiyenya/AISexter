from django.conf import settings
from django.utils import timezone
import requests
import asyncio
import datetime
from playwright.async_api import async_playwright, Response, Page, Browser
from asgiref.sync import sync_to_async

from .models import Profile, ChatMessage, FullChatMessage, ModelInfo
from .exceptions import (
    LoginPageException,
    OctoProfileStartException,
    OctoProfileAlreadyStartedException,
)


class OctoClient:
    """Client for interacting with Octo Browser API"""
    
    host: str
    port: int
    base_local_url: str
    email: str
    password: str

    def __init__(self, email: str, password: str, host: str = "octo", port: int = 58888):
        self.host = host
        self.port = port
        self.email = email
        self.password = password
        self.base_local_url = f"http://{self.host}:{self.port}"
    
    @classmethod
    def init_from_settings(cls):
        return cls(
            email=settings.OCTO_EMAIL,
            password=settings.OCTO_PASSWORD,
            host=settings.OCTO_HOST,
            port=settings.OCTO_PORT
        )

    def check_auth(self):
        # Check cloud API instead of local API
        api_url = "https://app.octobrowser.net/api/v2/automation/profiles"
        headers = {"X-Octo-Api-Token": settings.OCTO_API_TOKEN}
        
        try:
            response = requests.get(api_url, headers=headers, timeout=10)
            return response.ok
        except Exception as e:
            print(f"API check failed: {e}")
            return False
    
    def login(self):
        api_url = f"{self.base_local_url}/api/auth/login"
        payload = {
            "email": self.email,
            "password": self.password
        }
        response = requests.post(api_url, json=payload)

        if response.ok:
            print("Login successful")
            return True
        else:
            try:
                resp_data = response.json()
                if resp_data.get('error') == 'Already logged in':
                    print("Already logged in")
                    return True
            except Exception:
                pass
            print("Login failed")
            print(response.text)
            return False

    def start_profile(self, uuid: str, headless: bool = True, debug_port: bool = True, flags: list = ["--disable-dev-shm-usage"]):
        if not self.login():
            return False
    
        # –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º force_stop –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        print(f"üõë Force stopping profile {uuid} before starting...")
        self.force_stop_profile(uuid)
        
        import time
        time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        # Use local API for starting profile
        api_url = f"{self.base_local_url}/api/profiles/start"

        payload = {
            "uuid": uuid,
            "headless": headless,
            "debug_port": debug_port,
            "flags": flags
        }

        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å UUID: {uuid}")
        print(f"API URL: {api_url}")
        print(f"Payload: {payload}")

        response = requests.post(api_url, json=payload)
        print(f"Response Status: {response.status_code}")
        print(f"Response Text: {response.text}")

        if response.ok:
            print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            resp_data = response.json()
            return resp_data
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è")
            try:
                resp_data = response.json()
            except Exception:
                resp_data = None
            print(f"Status: {response.status_code}")
            print(f"Response: {response.text}")
            raise OctoProfileStartException(resp_data or "Failed to start profile")
    
    def stop_profile(self, uuid: str):
        # Use local API for stopping profile (as in example)
        api_url = f"{self.base_local_url}/api/profiles/stop"
        payload = {"uuid": uuid}
        response = requests.post(api_url, json=payload)
        if response.ok:
            print("Profile stopped successfully")
            return True
        return False
    
    def force_stop_profile(self, uuid: str):
        # Use local API force_stop exactly as in example
        api_url = f"{self.base_local_url}/api/profiles/force_stop"
        payload = {"uuid": uuid}
        response = requests.post(api_url, json=payload)
        if response.ok:
            print("Profile stopped successfully")
            return True
        return False

    def get_running_profiles(self):
        api_url = f"{self.base_local_url}/api/profiles"
        response = requests.get(api_url)
        
        if response.ok:
            data = response.json()
            running = [p for p in data if p.get('status') == 'running']
            return running
        return []
    
    def get_profile_info(self, uuid: str):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ (–≤–∫–ª—é—á–∞—è ws_endpoint –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)"""
        api_url = f"{self.base_local_url}/api/profiles"
        response = requests.get(api_url)
        
        if response.ok:
            data = response.json()
            for profile in data:
                if profile.get('uuid') == uuid and profile.get('status') == 'running':
                    return profile
        return None

    def force_stop_all_profiles(self):
        running_profiles = self.get_running_profiles()
        stopped_count = 0
        
        for profile in running_profiles:
            if self.stop_profile(profile['uuid']):
                stopped_count += 1
                print(f"Stopped profile {profile['uuid']}")
        
        print(f"Stopped {stopped_count} profiles")
        return stopped_count

    def force_restart_profile(self, uuid: str, max_attempts: int = 3):
        import time
        
        for attempt in range(max_attempts):
            print(f"Attempt {attempt + 1} to restart profile {uuid}")
            
            self.stop_profile(uuid)
            time.sleep(5)
            
            try:
                response_data = self.start_profile(uuid)
                print(f"Successfully restarted profile {uuid}")
                return response_data
            except OctoProfileAlreadyStartedException:
                if attempt == max_attempts - 1:
                    try:
                        self.force_stop_profile(uuid)
                        time.sleep(10)
                        response_data = self.start_profile(uuid)
                        return response_data
                    except Exception as e:
                        print(f"Final restart attempt failed: {e}")
                        raise
                else:
                    print(f"Profile still running after stop, waiting...")
                    time.sleep(10)
                    continue
            except Exception as e:
                print(f"Restart attempt {attempt + 1} failed: {e}")
                if attempt == max_attempts - 1:
                    raise
                time.sleep(5)
        
        raise Exception(f"Failed to restart profile {uuid} after {max_attempts} attempts")


class OctoAPIClient:
    """Client for Octo Browser REST API"""
    
    def __init__(self, token: str):
        self.token = token

    def get_chat_parser_profiles(self) -> list[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Ç–æ–≤ –ø–æ —Ç–µ–≥—É parserChat"""
        url = "https://app.octobrowser.net/api/v2/automation/profiles"
        headers = {"X-Octo-Api-Token": self.token}
        
        response = requests.get(
            url,
            params={
                "page_len": "50",
                "fields": "title",
                "search_tags": "parserChat"
            },
            headers=headers,
            timeout=30
        )

        if not response.ok:
            raise Exception(f"Failed to get chat parser profiles: {response.text}")

        resp_data = response.json()
        success = resp_data.get('success')
        if not success:
            raise Exception(f"Failed to get chat parser profiles: {resp_data.get('error')}")
        
        return resp_data.get('data', [])


class ChatParser:
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ OnlyFans
    """
    
    def __init__(self, profile_uuid: str, chat_url: str, update_only: bool = False):
        self.profile_uuid = profile_uuid
        self.chat_url = chat_url
        self.messages: list[dict] = []
        self.scroll_count: int = 0
        self.max_scrolls: int = 50
        self.model_user_id = None
        self.octo = OctoClient.init_from_settings()
        self.last_saved_count: int = 0
        self.save_batch_size: int = 100
        self.stop_requested: bool = False  # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        self.update_only: bool = update_only  # –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)
        
        # –ü–æ–ª—É—á–∞–µ–º model_id –∏ model_name –∏–∑ ModelInfo –ø–æ profile_uuid
        try:
            model_info = ModelInfo.objects.filter(model_octo_profile=profile_uuid).first()
            self.model_id = model_info.model_id if model_info else None
            self.model_name = model_info.model_name if model_info else None
            print(f"üîç Found model_id: {self.model_id}, model_name: {self.model_name} for profile {profile_uuid}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error getting model_id: {e}")
            self.model_id = None
            self.model_name = None
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if self.stop_requested:
            print("üõë Stop requested before starting, aborting...")
            return {'status': 'cancelled', 'message': 'Parser stopped by user'}
        
        try:
            response_data = self.octo.start_profile(self.profile_uuid)
        except OctoProfileAlreadyStartedException:
            print("Profile already started, using existing profile")
            try:
                profiles_response = requests.get(
                    f"{self.octo.base_local_url}/api/profiles/active",
                    timeout=10
                )
                if profiles_response.ok:
                    active_profiles = profiles_response.json()
                    for profile in active_profiles:
                        if profile.get('uuid') == self.profile_uuid:
                            response_data = profile
                            break
                    else:
                        response_data = await sync_to_async(self.octo.force_restart_profile)(self.profile_uuid)
                else:
                    response_data = await sync_to_async(self.octo.force_restart_profile)(self.profile_uuid)
            except Exception as e:
                print(f"Error getting active profile info: {e}")
                try:
                    response_data = await sync_to_async(self.octo.force_restart_profile)(self.profile_uuid)
                except Exception as restart_error:
                    print(f"Force restart failed: {restart_error}")
                    return {'status': 'error', 'message': f'Failed to get profile: {str(e)}'}
                
        except OctoProfileStartException as e:
            error_message = e.args[0]
            print(f"Profile start error: {error_message}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            if self.stop_requested:
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            return {'status': 'error', 'message': 'Failed to start profile'}

        if not response_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.stop_requested:
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            return {'status': 'error', 'message': 'Failed to start profile'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        if self.stop_requested:
            print("üõë Stop requested before connecting, stopping profile...")
            try:
                self.octo.stop_profile(self.profile_uuid)
            except:
                pass
            return {'status': 'cancelled', 'message': 'Parser stopped by user'}

        ws_endpoint = response_data['ws_endpoint'].replace('127.0.0.1', 'octo')
        
        parsing_successful = False
        try:
            await self.parse(ws_endpoint)
            parsing_successful = True
        except LoginPageException:
            print("Login page detected - session may have expired")
            if self.stop_requested:
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            return {'status': 'error', 'message': 'Login page detected'}
        except Exception as e:
            # –ï—Å–ª–∏ –±—ã–ª–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
            if self.stop_requested:
                print("üõë Stop requested during parsing")
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            print(f"Error during parsing: {e}")
            return {'status': 'error', 'message': f'Parsing error: {str(e)}'}
        
        if parsing_successful and len(self.messages) > 0:
            print(f"‚úÖ OnlyFans parsing completed. Collected {len(self.messages)} messages. Stopping profile.")
            self.octo.stop_profile(self.profile_uuid)

        return {'status': 'ok' if parsing_successful else 'error'}
    
    async def check_if_login_page(self, page: Page) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –ª–æ–≥–∏–Ω–∞"""
        try:
            login_indicators = [
                'input[type="email"]',
                'input[type="password"]',
                'button[type="submit"]',
                '.login-form',
                '#login',
                '[data-testid="login"]'
            ]
            
            for selector in login_indicators:
                if await page.query_selector(selector):
                    return True
            
            current_url = page.url
            if 'login' in current_url.lower() or 'signin' in current_url.lower():
                return True
                
            return False
        except Exception as e:
            print(f"Error checking login page: {e}")
            return False
        
    async def handle_response(self, response: Response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ API –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π OnlyFans"""
        if "onlyfans.com/api2/v2/chats" in response.url and "/messages" in response.url:
            if "application/json" in response.headers.get("content-type", ""):
                try:
                    json_body = await response.json()
                    if 'list' in json_body:
                        for message in json_body['list']:
                            await self._process_message(message)
                except Exception as e:
                    print(f"Failed to parse OnlyFans messages: {e}")
    
    async def _process_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è OnlyFans"""
        try:
            from_user = message.get('fromUser', {})
            from_user_id = from_user.get('id')
            from_username = from_user.get('username', '')
            
            is_from_model = from_user_id == self.model_user_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ API
            is_paid = False
            amount_paid = 0
            
            # –í OnlyFans API –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            price = message.get('price') or message.get('amount')
            if price:
                is_paid = True
                amount_paid = float(price)
            
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏
            if message.get('isPaid') or message.get('is_paid') or message.get('paid'):
                is_paid = True
                if not amount_paid and price:
                    amount_paid = float(price)
            
            message_data = {
                'from_user_id': str(from_user_id) if from_user_id else None,
                'from_username': from_username,
                'message_text': message.get('text', ''),
                'message_date': self._parse_date(message.get('createdAt')),
                'is_from_model': is_from_model,
                'is_paid': is_paid,
                'amount_paid': amount_paid
            }
            
            self.messages.append(message_data)
            print(f"Collected message from {from_username}: {message_data['message_text'][:50]}...")
            
        except Exception as e:
            print(f"Error processing OnlyFans message: {e}")
    
    def _parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏–ø–∞ '7:21 pm', '9 pm', 'Yesterday 11:05 pm' –∏–ª–∏ 'Oct 31, 2025 02:37'"""
        if not date_str or date_str == "":
            return None
        
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
        if isinstance(date_str, datetime.datetime):
            return date_str
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        date_str = str(date_str).strip()
        if not date_str or date_str == "":
            return None
        
        # –ï—Å–ª–∏ —ç—Ç–æ ISO —Ñ–æ—Ä–º–∞—Ç
        try:
            return datetime.datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        except (ValueError, AttributeError):
            pass
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ç–∏–ø–∞ "Oct 31, 2025 02:37" (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–∞—Ç–æ–π)
        try:
            import re
            from datetime import timedelta
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "Oct 31, 2025 02:37" –∏–ª–∏ "Oct 31, 2025 14:37"
            date_time_pattern = r'([A-Za-z]{3})\s+(\d{1,2}),\s+(\d{4})\s+(\d{1,2}):(\d{2})'
            match = re.search(date_time_pattern, date_str)
            if match:
                month_abbr = match.group(1)
                day = int(match.group(2))
                year = int(match.group(3))
                hour = int(match.group(4))
                minute = int(match.group(5))
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ
                months = {
                    'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6,
                    'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12
                }
                month = months.get(month_abbr.lower()[:3])
                if month:
                    try:
                        return datetime.datetime(year, month, day, hour, minute, 0)
                    except ValueError:
                        pass
        except Exception:
            pass
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º —Ç–∏–ø–∞ "7:21 pm", "9 pm" –∏–ª–∏ "Yesterday 11:05 pm"
        try:
            import re
            from datetime import timedelta
            
            date_str_lower = date_str.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "yesterday"
            is_yesterday = 'yesterday' in date_str_lower
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å –º–∏–Ω—É—Ç–∞–º–∏: "7:21 pm" –∏–ª–∏ "12:45 am"
            time_pattern_with_minutes = r'(\d{1,2}):(\d{2})\s*(am|pm)'
            match = re.search(time_pattern_with_minutes, date_str_lower)
            if match:
                hour = int(match.group(1))
                minute = int(match.group(2))
                am_pm = match.group(3)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
                if am_pm == 'pm' and hour != 12:
                    hour += 12
                elif am_pm == 'am' and hour == 12:
                    hour = 0
                
                # –°–æ–∑–¥–∞–µ–º datetime —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                now = datetime.datetime.now()
                result = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                
                # –ï—Å–ª–∏ –±—ã–ª–æ "Yesterday", –≤—ã—á–∏—Ç–∞–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å
                if is_yesterday:
                    result = result - timedelta(days=1)
                
                return result
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –º–∏–Ω—É—Ç: "9 pm" –∏–ª–∏ "12 am"
            time_pattern_without_minutes = r'(\d{1,2})\s*(am|pm)(?:\s|$)'
            match = re.search(time_pattern_without_minutes, date_str_lower)
            if match:
                hour = int(match.group(1))
                am_pm = match.group(2)
                minute = 0  # –ï—Å–ª–∏ –º–∏–Ω—É—Ç –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
                if am_pm == 'pm' and hour != 12:
                    hour += 12
                elif am_pm == 'am' and hour == 12:
                    hour = 0
                
                # –°–æ–∑–¥–∞–µ–º datetime —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                now = datetime.datetime.now()
                result = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
                
                # –ï—Å–ª–∏ –±—ã–ª–æ "Yesterday", –≤—ã—á–∏—Ç–∞–µ–º –æ–¥–∏–Ω –¥–µ–Ω—å
                if is_yesterday:
                    result = result - timedelta(days=1)
                
                return result
        except Exception:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback)
        return None
    
    async def navigate(self, page: Page, browser: Browser):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–∞—Ç—É —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print(f"Navigating to chat: {self.chat_url}")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º domcontentloaded –≤–º–µ—Å—Ç–æ load –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            # –∏ –¥–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
            await page.goto(self.chat_url, wait_until="domcontentloaded", timeout=60000)
            await page.wait_for_timeout(5 * 1000)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            print(f"First navigation attempt failed: {e}, retrying with networkidle...")
            try:
                await page.goto(self.chat_url, wait_until="networkidle", timeout=90000)
                await page.wait_for_timeout(3 * 1000)
            except Exception as retry_error:
                print(f"Navigation retry also failed: {retry_error}")
                # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É - –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ –∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —á–∞—Å—Ç–∏—á–Ω–æ
                await page.wait_for_timeout(3 * 1000)
        
        if await self.check_if_login_page(page):
            print("Warning: Login page indicators detected, but continuing...")
        
        self.model_user_id = self.profile_uuid
        
        try:
            await page.wait_for_selector('.b-chat__messages', timeout=10000)
            print("Chat messages container loaded")
        except Exception as e:
            print(f"Warning: Could not find chat messages container: {e}")
            if await self.check_if_login_page(page):
                print("Confirmed: Login page detected (no messages container)")
                await page.close()
                await browser.close()
                raise LoginPageException()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if self.update_only:
            print("üîÑ Update mode: collecting current visible messages only")
            await page.wait_for_timeout(2 * 1000)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._collect_messages_from_dom(page)
            print(f"Total messages collected: {len(self.messages)}")
            if len(self.messages) > self.last_saved_count:
                await self._save_messages_batch()
            return
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll_attempts = 0
        no_new_content_count = 0
        
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ –Ω–∞—á–∞–ª–∞
        await page.evaluate("""
            () => {
                const messagesContainer = document.querySelector('.b-chat__messages');
                if (messagesContainer) {
                    messagesContainer.scrollTop = 0;
                }
            }
        """)
        await page.wait_for_timeout(3 * 1000)
        
        while not self.stop_requested:
            scroll_attempts += 1
            print(f"Scrolling chat messages... attempt {scroll_attempts} (collected {len(self.messages)} messages so far)")
            
            messages_before = await page.evaluate("""
                () => {
                    const messages = document.querySelectorAll('.b-chat__message');
                    return messages.length;
                }
            """)
            
            await page.evaluate("""
                () => {
                    const messagesContainer = document.querySelector('.b-chat__messages');
                    if (messagesContainer) {
                        messagesContainer.scrollTop = 0;
                    }
                }
            """)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await page.wait_for_timeout(5 * 1000)
            
            messages_after = await page.evaluate("""
                () => {
                    const messages = document.querySelectorAll('.b-chat__message');
                    return messages.length;
                }
            """)
            
            print(f"Messages in DOM: before={messages_before}, after={messages_after}")
            
            if messages_after == messages_before:
                no_new_content_count += 1
                print(f"No new messages loaded (count: {no_new_content_count}/5)")
                
                if no_new_content_count >= 5:
                    print(f"Reached the beginning of the chat! Total scrolls: {scroll_attempts}")
                    print(f"Total messages in DOM: {messages_after}")
                    break
            else:
                no_new_content_count = 0
                print(f"Loaded {messages_after - messages_before} new messages, continuing...")
                
                if scroll_attempts % 10 == 0:
                    await self._collect_messages_from_dom(page)
                    if len(self.messages) - self.last_saved_count >= self.save_batch_size:
                        await self._save_messages_batch()
        
        if self.stop_requested:
            print(f"üõë Parsing stopped by user after {scroll_attempts} attempts")
        else:
            print(f"Finished scrolling after {scroll_attempts} attempts")
        
        await self._collect_messages_from_dom(page)
        
        print(f"Total messages collected: {len(self.messages)}")
        
        if len(self.messages) > self.last_saved_count:
            await self._save_messages_batch()
    
    async def _collect_messages_from_dom(self, page: Page):
        """–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ DOM"""
        try:
            messages_data = await page.evaluate("""
                () => {
                    const messages = document.querySelectorAll('.b-chat__message');
                    const messagesData = [];
                    
                    messages.forEach((messageEl, index) => {
                        try {
                            const textEl = messageEl.querySelector('.b-chat__message__text');
                            const messageText = textEl ? textEl.textContent.trim() : '';
                            
                            if (!messageText) return;
                            
                            const isFromMe = messageEl.classList.contains('m-from-me');
                            const fromUsername = isFromMe ? 'Model' : 'User';
                            
                            // –ò—â–µ–º –≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è - –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                            let messageTime = '';
                            const timeEl = messageEl.querySelector('.b-chat__message__time span');
                            if (timeEl) {
                                messageTime = timeEl.textContent.trim();
                            }
                            
                            // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —Ü–µ–Ω–µ
                            // –û–±—ã—á–Ω–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ "$8.88 not paid yet, 4:57 am" –∏–ª–∏ "$8.88 not paid yet"
                            let isPaid = false;
                            let amountPaid = 0;
                            
                            // –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ (–æ–±—ã—á–Ω–æ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è)
                            // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ messageEl, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                            const allTextNodes = messageEl.innerText || messageEl.textContent || '';
                            
                            // –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –∏—â–µ–º "$XX.XX not paid" –∏–ª–∏ "$XX.XX paid" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "$XX.XX"
                            // –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                            const paidMessagePattern = /\\$([\\d,]+(?:\\.\\d{2})?)\\s+(?:not\\s+)?paid/i;
                            const paidMatch = allTextNodes.match(paidMessagePattern);
                            
                            if (paidMatch) {
                                isPaid = true;
                                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É, —É–±–∏—Ä–∞—è –∑–∞–ø—è—Ç—ã–µ –∏ —Å–∏–º–≤–æ–ª –¥–æ–ª–ª–∞—Ä–∞
                                const priceStr = paidMatch[1].replace(/,/g, '');
                                amountPaid = parseFloat(priceStr);
                                
                                // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ timeEl
                                // –§–æ—Ä–º–∞—Ç: "$8.88 not paid yet, 4:57 am"
                                const timePattern = /(\\d{1,2}:?\\d{0,2}\\s*(?:am|pm)|\\d{1,2}:\\d{2})/i;
                                const timeMatch = allTextNodes.match(timePattern);
                                if (timeMatch && !messageTime) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    const timeIndex = allTextNodes.indexOf(timeMatch[1]);
                                    const messageTextIndex = allTextNodes.indexOf(messageText);
                                    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                                    if (timeIndex > messageTextIndex + messageText.length) {
                                        messageTime = timeMatch[1].trim();
                                    }
                                }
                            } else {
                                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–ª—å–∫–æ —Å —Ü–µ–Ω–æ–π "$XX.XX" –µ—Å–ª–∏ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                                const priceOnlyPattern = /\\$([\\d,]+(?:\\.\\d{2})?)/;
                                const priceMatch = allTextNodes.match(priceOnlyPattern);
                                if (priceMatch) {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    const priceIndex = allTextNodes.indexOf(priceMatch[0]);
                                    const messageTextIndex = allTextNodes.indexOf(messageText);
                                    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –±–ª–æ–∫–µ
                                    if (priceIndex > messageTextIndex + messageText.length || 
                                        !messageText.includes(priceMatch[0])) {
                                        isPaid = true;
                                        const priceStr = priceMatch[1].replace(/,/g, '');
                                        amountPaid = parseFloat(priceStr);
                                    }
                                }
                            }
                            
                            // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
                            if (!messageTime) {
                                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –¥—Ä—É–≥–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö
                                const allText = messageEl.innerText || messageEl.textContent || '';
                                const timePattern2 = /(\\d{1,2}:?\\d{0,2}\\s*(?:am|pm)|\\d{1,2}:\\d{2})/i;
                                const timeMatch2 = allText.match(timePattern2);
                                if (timeMatch2) {
                                    messageTime = timeMatch2[1].trim();
                                }
                            }
                            
                            const avatarEl = messageEl.querySelector('.g-avatar__placeholder');
                            const fromUserId = avatarEl ? avatarEl.textContent.trim() : '';
                            
                            messagesData.push({
                                from_user_id: fromUserId,
                                from_username: fromUsername,
                                message_text: messageText,
                                message_date: messageTime,
                                is_from_model: isFromMe,
                                is_paid: isPaid,
                                amount_paid: amountPaid
                            });
                        } catch (e) {
                            console.error('Error parsing message:', e);
                        }
                    });
                    
                    return messagesData;
                }
            """)
            
            for message_data in messages_data:
                if not any(msg['message_text'] == message_data['message_text'] and 
                          msg['from_username'] == message_data['from_username'] 
                          for msg in self.messages):
                    self.messages.append(message_data)
                    print(f"Collected DOM message from {message_data['from_username']}: {message_data['message_text'][:50]}...")
            
            print(f"Total messages collected from DOM: {len(messages_data)}")
            
        except Exception as e:
            print(f"Error collecting messages from DOM: {e}")
    
    async def parse(self, ws_endpoint: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        async with async_playwright() as p:
            page = None
            browser = None
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
                if self.stop_requested:
                    print("üõë Stop requested before connecting, aborting...")
                    return
                    
                browser = await p.chromium.connect_over_cdp(ws_endpoint)
                context = browser.contexts[0]
                page = await context.new_page()
                
                page.on("response", lambda response: asyncio.create_task(self.handle_response(response)))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
                if self.stop_requested:
                    print("üõë Stop requested before navigation, aborting...")
                    return
                
                await self.navigate(page, browser)
                
            except Exception as e:
                # –ï—Å–ª–∏ –±—ã–ª–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                if self.stop_requested:
                    print("üõë Stop requested, parsing aborted")
                    return
                print(f"Error during parsing: {e}")
                raise
            finally:
                if page is not None:
                    await page.close()
                if browser is not None:
                    await browser.close()
                
                try:
                    await sync_to_async(self.save_messages)()
                except Exception as e:
                    print(f"Error in final save: {e}")
    
    async def _save_messages_batch(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        new_messages = self.messages[self.last_saved_count:]
        if not new_messages:
            return
        
        print(f"üíæ Saving batch: {len(new_messages)} new messages (total collected: {len(self.messages)})")
        
        try:
            await sync_to_async(self._save_messages_sync)(new_messages)
            self.last_saved_count = len(self.messages)
            print(f"‚úÖ Batch saved successfully! Total saved so far: {self.last_saved_count}")
        except Exception as e:
            print(f"‚ùå Error saving batch: {e}")
    
    def _save_messages_sync(self, messages_to_save: list[dict]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π OnlyFans (—Ç–æ–ª—å–∫–æ –≤ FullChatMessage)"""
        saved_full_count = 0
        
        for message_data in messages_to_save:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ FullChatMessage (–±–µ–∑ Profile –∏ ChatMessage)
                if self.model_id:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º is_from_model –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–∞—Ä—Å–∏–ª–∏ –∏–∑ DOM –ø–æ –∫–ª–∞—Å—Å—É m-from-me)
                    is_from_model = message_data.get('is_from_model', False)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id:
                    # - –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º model_name
                    # - –ï—Å–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º from_user_id
                    if is_from_model:
                        user_id = self.model_name if self.model_name else 'Model'
                    else:
                        user_id = message_data.get('from_user_id', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ chat_url –∏ message)
                    existing_full = FullChatMessage.objects.filter(
                        chat_url=self.chat_url,
                        message=message_data['message_text'],
                        model_id=self.model_id
                    ).first()
                    
                    if not existing_full:
                        # –ü–∞—Ä—Å–∏–º timestamp –∏–∑ message_date (–≤—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞)
                        timestamp = None
                        if message_data.get('message_date'):
                            # –ï—Å–ª–∏ message_date —É–∂–µ datetime –æ–±—ä–µ–∫—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                            if isinstance(message_data['message_date'], datetime.datetime):
                                timestamp = message_data['message_date']
                            else:
                                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É (–º–æ–∂–µ—Ç –±—ã—Ç—å "9 pm", "Oct 31, 2025 02:37" –∏ —Ç.–¥.)
                                timestamp = self._parse_date(str(message_data['message_date']))
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
                        if timestamp is None:
                            print(f"‚ö†Ô∏è Warning: Could not parse message_date '{message_data.get('message_date')}', using current time as fallback")
                            timestamp = datetime.datetime.now()
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ message_data
                        is_paid = message_data.get('is_paid', False)
                        amount_paid = message_data.get('amount_paid', 0) or 0
                        
                        FullChatMessage.objects.create(
                            user_id=user_id,
                            chat_url=self.chat_url,
                            is_from_model=is_from_model,
                            message=message_data['message_text'],
                            timestamp=timestamp,
                            is_paid=is_paid,
                            amount_paid=amount_paid,
                            model_id=self.model_id
                        )
                        saved_full_count += 1
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        user_type = "model" if is_from_model else "user"
                        print(f"üíæ Saved message from {user_type}: user_id={user_id}")
                else:
                    print(f"‚ö†Ô∏è Warning: model_id not found, skipping message save")
                        
            except Exception as e:
                print(f"Error saving message: {e}")
        
        if self.model_id:
            print(f"üíæ Saved {saved_full_count} new OnlyFans messages to FullChatMessage with model_id: {self.model_id}")
    
    def save_messages(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        new_messages = self.messages[self.last_saved_count:]
        if new_messages:
            print(f"üíæ Final save: {len(new_messages)} remaining messages")
            self._save_messages_sync(new_messages)
            self.last_saved_count = len(self.messages)
        else:
            print("‚úÖ All messages already saved during parsing")


class ChatParserFansly:
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ Fansly
    """
    
    def __init__(self, profile_uuid: str, chat_url: str, update_only: bool = False):
        self.profile_uuid = profile_uuid
        self.chat_url = chat_url
        self.messages: list[dict] = []
        self.scroll_count: int = 0
        self.max_scrolls: int = 50
        self.model_user_id = None
        self.octo = OctoClient.init_from_settings()
        self.last_saved_count: int = 0
        self.save_batch_size: int = 100
        self.stop_requested: bool = False
        self.update_only: bool = update_only
        
        # –ü–æ–ª—É—á–∞–µ–º model_id –∏ model_name –∏–∑ ModelInfo –ø–æ profile_uuid
        try:
            model_info = ModelInfo.objects.filter(model_octo_profile=profile_uuid).first()
            self.model_id = model_info.model_id if model_info else None
            self.model_name = model_info.model_name if model_info else None
            print(f"üîç Found model_id: {self.model_id}, model_name: {self.model_name} for profile {profile_uuid}")
        except Exception as e:
            print(f"‚ö†Ô∏è Error getting model_id: {e}")
            self.model_id = None
            self.model_name = None
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ Fansly"""
        if self.stop_requested:
            print("üõë Stop requested before starting, aborting...")
            return {'status': 'cancelled', 'message': 'Parser stopped by user'}
        
        try:
            response_data = self.octo.start_profile(self.profile_uuid)
        except OctoProfileAlreadyStartedException:
            print("Profile already started, using existing profile")
            try:
                profiles_response = requests.get(
                    f"{self.octo.base_local_url}/api/profiles/active",
                    timeout=10
                )
                if profiles_response.ok:
                    active_profiles = profiles_response.json()
                    for profile in active_profiles:
                        if profile.get('uuid') == self.profile_uuid:
                            response_data = profile
                            break
                    else:
                        response_data = await sync_to_async(self.octo.force_restart_profile)(self.profile_uuid)
                else:
                    response_data = await sync_to_async(self.octo.force_restart_profile)(self.profile_uuid)
            except Exception as e:
                print(f"Error getting active profile info: {e}")
                try:
                    response_data = await sync_to_async(self.octo.force_restart_profile)(self.profile_uuid)
                except Exception as restart_error:
                    print(f"Force restart failed: {restart_error}")
                    return {'status': 'error', 'message': f'Failed to get profile: {str(e)}'}
                
        except OctoProfileStartException as e:
            error_message = e.args[0]
            print(f"Profile start error: {error_message}")
            if self.stop_requested:
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            return {'status': 'error', 'message': 'Failed to start profile'}

        if not response_data:
            if self.stop_requested:
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            return {'status': 'error', 'message': 'Failed to start profile'}

        if self.stop_requested:
            print("üõë Stop requested before connecting, stopping profile...")
            try:
                self.octo.stop_profile(self.profile_uuid)
            except:
                pass
            return {'status': 'cancelled', 'message': 'Parser stopped by user'}

        ws_endpoint = response_data['ws_endpoint'].replace('127.0.0.1', 'octo')
        
        parsing_successful = False
        try:
            await self.parse(ws_endpoint)
            parsing_successful = True
        except LoginPageException:
            print("Login page detected - session may have expired")
            if self.stop_requested:
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            return {'status': 'error', 'message': 'Login page detected'}
        except Exception as e:
            if self.stop_requested:
                print("üõë Stop requested during parsing")
                return {'status': 'cancelled', 'message': 'Parser stopped by user'}
            print(f"Error during parsing: {e}")
            return {'status': 'error', 'message': f'Parsing error: {str(e)}'}
        
        if parsing_successful and len(self.messages) > 0:
            print(f"‚úÖ Fansly parsing completed. Collected {len(self.messages)} messages. Stopping profile.")
            self.octo.stop_profile(self.profile_uuid)

        return {'status': 'ok' if parsing_successful else 'error'}
    
    async def check_if_login_page(self, page: Page) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –ª–æ–≥–∏–Ω–∞ Fansly"""
        try:
            login_indicators = [
                'input[type="email"]',
                'input[type="password"]',
                'button[type="submit"]',
                '.login-form',
                '#login',
                '[data-testid="login"]'
            ]
            
            for selector in login_indicators:
                if await page.query_selector(selector):
                    return True
            
            current_url = page.url
            if 'login' in current_url.lower() or 'signin' in current_url.lower():
                return True
                
            return False
        except Exception as e:
            print(f"Error checking login page: {e}")
            return False
    
    async def handle_response(self, response: Response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ API –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Fansly"""
        if "fansly.com/api" in response.url and "message" in response.url.lower():
            if "application/json" in response.headers.get("content-type", ""):
                try:
                    json_body = await response.json()
                    # Fansly API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö
                    if 'response' in json_body and isinstance(json_body['response'], list):
                        for message in json_body['response']:
                            await self._process_message(message)
                    elif isinstance(json_body, list):
                        for message in json_body:
                            await self._process_message(message)
                except Exception as e:
                    print(f"Failed to parse Fansly messages from API: {e}")
    
    async def _process_message(self, message: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Fansly –∏–∑ API"""
        try:
            # Fansly API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
            from_user_id = message.get('accountId') or message.get('fromAccountId')
            
            is_from_model = str(from_user_id) == str(self.model_id) if from_user_id and self.model_id else False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            is_paid = False
            amount_paid = 0
            
            if message.get('price'):
                is_paid = True
                amount_paid = float(message.get('price', 0))
            
            message_data = {
                'from_user_id': str(from_user_id) if from_user_id else None,
                'from_username': message.get('username', 'User'),
                'message_text': message.get('content', ''),
                'message_date': self._parse_date(message.get('createdAt')),
                'is_from_model': is_from_model,
                'is_paid': is_paid,
                'amount_paid': amount_paid
            }
            
            self.messages.append(message_data)
            print(f"Collected Fansly message: {message_data['message_text'][:50]}...")
            
        except Exception as e:
            print(f"Error processing Fansly message: {e}")
    
    def _parse_date(self, date_str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞, timestamp –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∞ Fansly —Ç–∏–ø–∞ 'Oct 31, 19:46'"""
        if not date_str or date_str == "":
            return None
        
        if isinstance(date_str, datetime.datetime):
            return date_str
        
        date_str = str(date_str).strip()
        if not date_str or date_str == "":
            return None
        
        # ISO —Ñ–æ—Ä–º–∞—Ç
        try:
            return datetime.datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        except (ValueError, AttributeError):
            pass
        
        # –§–æ—Ä–º–∞—Ç Fansly: "Oct 31, 19:46" –∏–ª–∏ "Oct 31, 2024 19:46"
        try:
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "Oct 31, 19:46" (–±–µ–∑ –≥–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            date_time_pattern = r'([A-Za-z]{3})\s+(\d{1,2}),\s+(\d{1,2}):(\d{2})'
            match = re.search(date_time_pattern, date_str)
            if match:
                month_abbr = match.group(1)
                day = int(match.group(2))
                hour = int(match.group(3))
                minute = int(match.group(4))
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ —á–∏—Å–ª–æ
                months = {
                    'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6,
                    'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12
                }
                month = months.get(month_abbr.lower()[:3])
                if month:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                    now = datetime.datetime.now()
                    year = now.year
                    try:
                        return datetime.datetime(year, month, day, hour, minute, 0)
                    except ValueError:
                        pass
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "Oct 31, 2024 19:46" (—Å –≥–æ–¥–æ–º)
            date_time_pattern_with_year = r'([A-Za-z]{3})\s+(\d{1,2}),\s+(\d{4})\s+(\d{1,2}):(\d{2})'
            match = re.search(date_time_pattern_with_year, date_str)
            if match:
                month_abbr = match.group(1)
                day = int(match.group(2))
                year = int(match.group(3))
                hour = int(match.group(4))
                minute = int(match.group(5))
                
                months = {
                    'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6,
                    'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12
                }
                month = months.get(month_abbr.lower()[:3])
                if month:
                    try:
                        return datetime.datetime(year, month, day, hour, minute, 0)
                    except ValueError:
                        pass
        except Exception:
            pass
        
        # Unix timestamp (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ —Å–µ–∫—É–Ω–¥–∞—Ö)
        try:
            timestamp = float(date_str)
            # –ï—Å–ª–∏ timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–±–æ–ª—å—à–µ 10 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤)
            if timestamp > 10000000000:
                timestamp = timestamp / 1000
            return datetime.datetime.fromtimestamp(timestamp)
        except (ValueError, TypeError):
            pass
        
        return None
    
    async def navigate(self, page: Page, browser: Browser):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —á–∞—Ç—É Fansly —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        print(f"üéØ Navigating to Fansly chat: {self.chat_url}")
        try:
            await page.goto(self.chat_url, wait_until="domcontentloaded", timeout=60000)
            await page.wait_for_timeout(5 * 1000)
        except Exception as e:
            print(f"First navigation attempt failed: {e}, retrying with networkidle...")
            try:
                await page.goto(self.chat_url, wait_until="networkidle", timeout=90000)
                await page.wait_for_timeout(3 * 1000)
            except Exception as retry_error:
                print(f"Navigation retry also failed: {retry_error}")
                await page.wait_for_timeout(3 * 1000)
        
        if await self.check_if_login_page(page):
            print("Warning: Login page indicators detected, but continuing...")
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Fansly
        try:
            # –í Fansly —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ app-group-message-collection
            await page.wait_for_selector('app-group-message-collection', timeout=10000)
            print("‚úÖ Fansly chat messages container loaded")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not find Fansly messages container: {e}")
            if await self.check_if_login_page(page):
                print("Confirmed: Login page detected (no messages container)")
                await page.close()
                await browser.close()
                raise LoginPageException()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if self.update_only:
            print("üîÑ Update mode: collecting current visible messages only")
            await page.wait_for_timeout(2 * 1000)
            await self._collect_messages_from_dom(page)
            print(f"Total messages collected: {len(self.messages)}")
            if len(self.messages) > self.last_saved_count:
                await self._save_messages_batch()
            return
        
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll_attempts = 0
        no_new_content_count = 0
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Fansly
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        scroll_container_info = await page.evaluate("""
            () => {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                const selectors = [
                    '.message-content-list',
                    '.message-collection-wrapper',
                    'app-group-message-container',
                    'app-group-message-collection',
                    '.message-collection'
                ];
                
                for (const selector of selectors) {
                    const el = document.querySelector(selector);
                    if (el) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                        const hasScroll = el.scrollHeight > el.clientHeight;
                        console.log(`Found ${selector}: scrollHeight=${el.scrollHeight}, clientHeight=${el.clientHeight}, hasScroll=${hasScroll}`);
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
                        if (hasScroll) {
                            return { selector: selector, found: true };
                        }
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å overflow
                const allElements = document.querySelectorAll('*');
                for (const el of allElements) {
                    const style = window.getComputedStyle(el);
                    if ((style.overflow === 'auto' || style.overflow === 'scroll' || style.overflowY === 'auto' || style.overflowY === 'scroll') 
                        && el.scrollHeight > el.clientHeight) {
                        return { selector: 'custom', element: el, found: true };
                    }
                }
                
                return { found: false };
            }
        """)
        
        print(f"üîç Scroll container detection: {scroll_container_info}")
        
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ –Ω–∞—á–∞–ª–∞
        await page.evaluate("""
            () => {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
                const container = document.querySelector('.message-content-list') ||
                                document.querySelector('.message-collection-wrapper') ||
                                document.querySelector('app-group-message-container') ||
                                document.querySelector('app-group-message-collection') ||
                                document.querySelector('.message-collection');
                if (container) {
                    console.log('Scrolling container:', container.tagName, container.className);
                    container.scrollTop = 0;
                } else {
                    console.log('No container found, using window scroll');
                    window.scrollTo(0, 0);
                }
            }
        """)
        await page.wait_for_timeout(3 * 1000)
        
        while not self.stop_requested:
            scroll_attempts += 1
            print(f"üìú Scrolling Fansly chat... attempt {scroll_attempts} (collected {len(self.messages)} messages so far)")
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            messages_before = await page.evaluate("""
                () => {
                    const messages = document.querySelectorAll('app-group-message');
                    return messages.length;
                }
            """)
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö –∫ –Ω–∞—á–∞–ª—É —á–∞—Ç–∞
            scroll_info = await page.evaluate("""
                () => {
                    // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
                    const container = document.querySelector('.message-content-list') ||
                                    document.querySelector('.message-collection-wrapper') ||
                                    document.querySelector('app-group-message-container') ||
                                    document.querySelector('app-group-message-collection') ||
                                    document.querySelector('.message-collection');
                    if (container) {
                        const scrollTopBefore = container.scrollTop;
                        const scrollHeight = container.scrollHeight;
                        const clientHeight = container.clientHeight;
                        
                        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–º —à–∞–≥–æ–º –≤–≤–µ—Ä—Ö
                        container.scrollBy(0, -2000);
                        
                        const scrollTopAfter = container.scrollTop;
                        
                        return {
                            found: true,
                            selector: container.tagName + '.' + container.className,
                            scrollTopBefore: scrollTopBefore,
                            scrollTopAfter: scrollTopAfter,
                            scrollHeight: scrollHeight,
                            clientHeight: clientHeight,
                            scrollDelta: scrollTopBefore - scrollTopAfter
                        };
                    } else {
                        window.scrollBy(0, -2000);
                        return { found: false, usedWindow: true };
                    }
                }
            """)
            
            print(f"üìä Scroll info: {scroll_info}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è Fansly, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await page.wait_for_timeout(5 * 1000)
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            messages_after = await page.evaluate("""
                () => {
                    const messages = document.querySelectorAll('app-group-message');
                    return messages.length;
                }
            """)
            
            print(f"üìä Messages in DOM: before={messages_before}, after={messages_after}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –≤–µ—Ä—Ö–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if scroll_info.get('found') and scroll_info.get('scrollTopAfter', -1) == 0 and scroll_info.get('scrollDelta', 0) == 0:
                print(f"‚úÖ Reached the top of the container (scrollTop=0, no scroll delta)")
                no_new_content_count += 1
            
            if messages_after == messages_before:
                no_new_content_count += 1
                print(f"‚è∏Ô∏è No new messages loaded (count: {no_new_content_count}/5)")
                
                if no_new_content_count >= 3:  # –£–º–µ–Ω—å—à–∞–µ–º —Å 5 –¥–æ 3, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º scrollTop
                    print(f"‚úÖ Reached the beginning of the Fansly chat! Total scrolls: {scroll_attempts}")
                    print(f"üìù Total messages in DOM: {messages_after}")
                    break
            else:
                no_new_content_count = 0
                print(f"‚ú® Loaded {messages_after - messages_before} new messages, continuing...")
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                if scroll_attempts % 10 == 0:
                    await self._collect_messages_from_dom(page)
                    if len(self.messages) - self.last_saved_count >= self.save_batch_size:
                        await self._save_messages_batch()
        
        if self.stop_requested:
            print(f"üõë Parsing stopped by user after {scroll_attempts} attempts")
        else:
            print(f"‚úÖ Finished scrolling after {scroll_attempts} attempts")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ DOM
        await self._collect_messages_from_dom(page)
        
        print(f"üìä Total messages collected: {len(self.messages)}")
        
        if len(self.messages) > self.last_saved_count:
            await self._save_messages_batch()
    
    async def _collect_messages_from_dom(self, page: Page):
        """–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ DOM Fansly"""
        try:
            messages_data = await page.evaluate("""
                () => {
                    const messages = document.querySelectorAll('app-group-message');
                    const messagesData = [];
                    
                    messages.forEach((messageEl, index) => {
                        try {
                            // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ .message-text
                            const textEl = messageEl.querySelector('.message-text');
                            const messageText = textEl ? textEl.textContent.trim() : '';
                            
                            if (!messageText) return;
                            
                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (my-message = –æ—Ç –º–æ–¥–µ–ª–∏)
                            const isFromModel = messageEl.classList.contains('my-message');
                            
                            // –ò—â–µ–º timestamp - –≤—Ä–µ–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ span.margin-right-text –≤–Ω—É—Ç—Ä–∏ .timestamp
                            // .timestamp –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—è, –Ω–µ –≤–Ω—É—Ç—Ä–∏ app-group-message
                            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <app-group-message-collection><div class="flex-row"><div class="flex-col width-100"><div><app-group-message>...</app-group-message></div><div class="timestamp"><span class="margin-right-text">...</span></div></div></div></app-group-message-collection>
                            let messageTime = '';
                            
                            // –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º —á–µ—Ä–µ–∑ closest –≤ app-group-message-collection
                            const messageCollection = messageEl.closest('app-group-message-collection');
                            if (messageCollection && !messageTime) {
                                const timestampEl = messageCollection.querySelector('.timestamp');
                                if (timestampEl) {
                                    const timeSpan = timestampEl.querySelector('span.margin-right-text');
                                    if (timeSpan) {
                                        messageTime = timeSpan.textContent.trim();
                                    } else {
                                        messageTime = timestampEl.textContent.trim();
                                    }
                                }
                            }
                            
                            // –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º —á–µ—Ä–µ–∑ closest –≤ flex-col.width-100 (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è)
                            if (!messageTime) {
                                const parentFlexCol = messageEl.closest('.flex-col.width-100');
                                if (parentFlexCol) {
                                    const timestampEl = parentFlexCol.querySelector('.timestamp');
                                    if (timestampEl) {
                                        const timeSpan = timestampEl.querySelector('span.margin-right-text');
                                        if (timeSpan) {
                                            messageTime = timeSpan.textContent.trim();
                                        } else {
                                            messageTime = timestampEl.textContent.trim();
                                        }
                                    }
                                }
                            }
                            
                            // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            if (!messageTime) {
                                let parent = messageEl.parentElement;
                                let attempts = 0;
                                while (parent && attempts < 5) {
                                    const timestampEl = parent.querySelector('.timestamp');
                                    if (timestampEl) {
                                        const timeSpan = timestampEl.querySelector('span.margin-right-text');
                                        if (timeSpan) {
                                            messageTime = timeSpan.textContent.trim();
                                        } else {
                                            messageTime = timestampEl.textContent.trim();
                                        }
                                        break;
                                    }
                                    parent = parent.parentElement;
                                    attempts++;
                                }
                            }
                            
                            // –ú–µ—Ç–æ–¥ 4: –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –≤ —Å–∞–º–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ (–Ω–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
                            if (!messageTime) {
                                const timestampEl = messageEl.querySelector('.timestamp');
                                if (timestampEl) {
                                    const timeSpan = timestampEl.querySelector('span.margin-right-text');
                                    if (timeSpan) {
                                        messageTime = timeSpan.textContent.trim();
                                    } else {
                                        messageTime = timestampEl.textContent.trim();
                                    }
                                }
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            // –í Fansly –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫—É–ø–ª–µ–Ω–Ω—ã–π –∏ –Ω–µ–∫—É–ø–ª–µ–Ω–Ω—ã–π
                            // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–π
                            // –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ purchased-content –∏–ª–∏ purchased-avatar (–≤–∫–ª—é—á–∞—è not-purchased)
                            let isPaid = false;
                            let amountPaid = 0;
                            
                            // –ò—â–µ–º purchased-content –∏–ª–∏ purchased-avatar –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –µ–≥–æ attachment
                            const purchasedContent = messageEl.querySelector('.purchased-content');
                            const purchasedAvatar = messageEl.querySelector('.purchased-avatar');
                            const messageAttachment = messageEl.querySelector('message-attachment');
                            
                            // –ï—Å–ª–∏ –µ—Å—Ç—å message-attachment, –∏—â–µ–º –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
                            let attachmentPurchasedContent = null;
                            let attachmentPurchasedAvatar = null;
                            if (messageAttachment) {
                                attachmentPurchasedContent = messageAttachment.querySelector('.purchased-content');
                                attachmentPurchasedAvatar = messageAttachment.querySelector('.purchased-avatar');
                            }
                            
                            // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –ª—é–±–æ–π –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - —ç—Ç–æ –ø–ª–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if (purchasedContent || purchasedAvatar || attachmentPurchasedContent || attachmentPurchasedAvatar) {
                                isPaid = true;
                                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É
                                const allText = messageEl.innerText || messageEl.textContent || '';
                                const pricePattern = /\\$([\\d,]+(?:\\.\\d{2})?)/;
                                const priceMatch = allText.match(pricePattern);
                                if (priceMatch) {
                                    const priceStr = priceMatch[1].replace(/,/g, '');
                                    amountPaid = parseFloat(priceStr);
                                }
                            }
                            
                            // –ò–∑–≤–ª–µ–∫–∞–µ–º user ID –∏–∑ –∞–≤–∞—Ç–∞—Ä–∞ (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ)
                            let fromUserId = '';
                            
                            // –ê–≤–∞—Ç–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, –∏—â–µ–º –µ–≥–æ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                            // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <div class="flex-row"><app-account-avatar><a href="/username"></a></app-account-avatar><div><app-group-message>...</app-group-message></div></div>
                            const parentContainer = messageEl.parentElement?.parentElement?.parentElement;
                            if (parentContainer) {
                                const avatarEl = parentContainer.querySelector('app-account-avatar a[href]');
                                if (avatarEl) {
                                    const href = avatarEl.getAttribute('href');
                                    // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ href —Ç–∏–ø–∞ "/alan_90"
                                    fromUserId = href ? href.replace('/', '').trim() : '';
                                }
                            }
                            
                            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—è, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                            if (!fromUserId) {
                                const closestRow = messageEl.closest('.flex-row');
                                if (closestRow) {
                                    const avatarEl = closestRow.querySelector('app-account-avatar a[href]');
                                    if (avatarEl) {
                                        const href = avatarEl.getAttribute('href');
                                        fromUserId = href ? href.replace('/', '').trim() : '';
                                    }
                                }
                            }
                            
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fromUserId –∫–∞–∫ username, –µ—Å–ª–∏ –µ—Å—Ç—å
                            const finalUsername = isFromModel ? 'Model' : (fromUserId || 'User');
                            
                            messagesData.push({
                                from_user_id: fromUserId,
                                from_username: finalUsername,
                                message_text: messageText,
                                message_date: messageTime,
                                is_from_model: isFromModel,
                                is_paid: isPaid,
                                amount_paid: amountPaid
                            });
                        } catch (e) {
                            console.error('Error parsing Fansly message:', e);
                        }
                    });
                    
                    return messagesData;
                }
            """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for message_data in messages_data:
                if not any(msg['message_text'] == message_data['message_text'] and 
                          msg['from_username'] == message_data['from_username'] 
                          for msg in self.messages):
                    self.messages.append(message_data)
                    user_id_info = f"(user_id: {message_data['from_user_id']})" if message_data['from_user_id'] else "(no user_id)"
                    print(f"‚úÖ Collected Fansly message from {message_data['from_username']} {user_id_info}: {message_data['message_text'][:50]}...")
            
            print(f"üìä Total messages collected from Fansly DOM: {len(messages_data)}")
            
        except Exception as e:
            print(f"‚ùå Error collecting messages from Fansly DOM: {e}")
    
    async def parse(self, ws_endpoint: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ Fansly"""
        async with async_playwright() as p:
            page = None
            browser = None
            try:
                if self.stop_requested:
                    print("üõë Stop requested before connecting, aborting...")
                    return
                    
                browser = await p.chromium.connect_over_cdp(ws_endpoint)
                context = browser.contexts[0]
                page = await context.new_page()
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç—ã API
                page.on("response", lambda response: asyncio.create_task(self.handle_response(response)))
                
                if self.stop_requested:
                    print("üõë Stop requested before navigation, aborting...")
                    return
                
                await self.navigate(page, browser)
                
            except Exception as e:
                if self.stop_requested:
                    print("üõë Stop requested, parsing aborted")
                    return
                print(f"‚ùå Error during Fansly parsing: {e}")
                raise
            finally:
                if page is not None:
                    await page.close()
                if browser is not None:
                    await browser.close()
                
                try:
                    await sync_to_async(self.save_messages)()
                except Exception as e:
                    print(f"‚ùå Error in final save: {e}")
    
    async def _save_messages_batch(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞—Ç—á–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        new_messages = self.messages[self.last_saved_count:]
        if not new_messages:
            return
        
        print(f"üíæ Saving Fansly batch: {len(new_messages)} new messages (total collected: {len(self.messages)})")
        
        try:
            await sync_to_async(self._save_messages_sync)(new_messages)
            self.last_saved_count = len(self.messages)
            print(f"‚úÖ Fansly batch saved successfully! Total saved so far: {self.last_saved_count}")
        except Exception as e:
            print(f"‚ùå Error saving Fansly batch: {e}")
    
    def _save_messages_sync(self, messages_to_save: list[dict]):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Fansly (—Ç–æ–ª—å–∫–æ –≤ FullChatMessage)"""
        saved_full_count = 0
        
        for message_data in messages_to_save:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ FullChatMessage (–±–µ–∑ Profile –∏ ChatMessage)
                if self.model_id:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º is_from_model –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–∞—Ä—Å–∏–ª–∏ –∏–∑ DOM –ø–æ –∫–ª–∞—Å—Å—É my-message)
                    is_from_model = message_data.get('is_from_model', False)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id:
                    # - –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏ ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º model_name
                    # - –ï—Å–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º from_user_id –∏–∑ href
                    if is_from_model:
                        user_id = self.model_name if self.model_name else 'Model'
                    else:
                        user_id = message_data.get('from_user_id', '')
                    
                    existing_full = FullChatMessage.objects.filter(
                        chat_url=self.chat_url,
                        message=message_data['message_text'],
                        model_id=self.model_id
                    ).first()
                    
                    if not existing_full:
                        timestamp = None
                        if message_data.get('message_date'):
                            if isinstance(message_data['message_date'], datetime.datetime):
                                timestamp = message_data['message_date']
                            else:
                                timestamp = self._parse_date(str(message_data['message_date']))
                        
                        if timestamp is None:
                            print(f"‚ö†Ô∏è Warning: Could not parse message_date '{message_data.get('message_date')}', using 000000 (1970-01-01 00:00:00) as fallback")
                            timestamp = datetime.datetime(1970, 1, 1, 0, 0, 0)
                        
                        is_paid = message_data.get('is_paid', False)
                        amount_paid = message_data.get('amount_paid', 0) or 0
                        
                        FullChatMessage.objects.create(
                            user_id=user_id,
                            chat_url=self.chat_url,
                            is_from_model=is_from_model,
                            message=message_data['message_text'],
                            timestamp=timestamp,
                            is_paid=is_paid,
                            amount_paid=amount_paid,
                            model_id=self.model_id
                        )
                        saved_full_count += 1
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        user_type = "model" if is_from_model else "user"
                        print(f"üíæ Saved message from {user_type}: user_id={user_id}")
                else:
                    print(f"‚ö†Ô∏è Warning: model_id not found, skipping message save")
                        
            except Exception as e:
                print(f"‚ùå Error saving Fansly message: {e}")
        
        if self.model_id:
            print(f"üíæ Saved {saved_full_count} new Fansly messages to FullChatMessage with model_id: {self.model_id}")
    
    def save_messages(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π Fansly –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        new_messages = self.messages[self.last_saved_count:]
        if new_messages:
            print(f"üíæ Final Fansly save: {len(new_messages)} remaining messages")
            self._save_messages_sync(new_messages)
            self.last_saved_count = len(self.messages)
        else:
            print("‚úÖ All Fansly messages already saved during parsing")

