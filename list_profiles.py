import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'AIsexter.settings')
django.setup()

from parser.services import OctoAPIClient
from django.conf import settings
import requests

print('üîç Getting all available profiles from Octo Browser...\n')

# –ò—Å–ø–æ–ª—å–∑—É–µ–º API —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
api_token = settings.OCTO_API_TOKEN
url = "https://app.octobrowser.net/api/v2/automation/profiles"
headers = {"X-Octo-Api-Token": api_token}

try:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–µ–≥–∞–º
    response = requests.get(
        url,
        params={
            "page_len": "100",  # –ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            "fields": "title,tags"  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∞–∫–∂–µ —Ç–µ–≥–∏
        },
        headers=headers,
        timeout=30
    )
    
    if not response.ok:
        print(f'‚ùå Error: {response.status_code}')
        print(response.text)
        exit(1)
    
    data = response.json()
    
    if not data.get('success'):
        print(f"‚ùå API Error: {data.get('error')}")
        exit(1)
    
    profiles = data.get('data', [])
    
    print(f'üìä Found {len(profiles)} profiles:\n')
    print('=' * 80)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —Ç–µ–≥–∞–º
    profiles_by_tag = {}
    profiles_without_tags = []
    
    for profile in profiles:
        uuid = profile.get('uuid', 'Unknown')
        title = profile.get('title', 'No title')
        tags = profile.get('tags', [])
        
        if not tags:
            profiles_without_tags.append((uuid, title, tags))
        else:
            for tag in tags:
                if tag not in profiles_by_tag:
                    profiles_by_tag[tag] = []
                profiles_by_tag[tag].append((uuid, title, tags))
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ —Ç–µ–≥–∞–º
    for tag in sorted(profiles_by_tag.keys()):
        print(f'\nüè∑Ô∏è  Tag: {tag}')
        print('-' * 80)
        for uuid, title, tags in profiles_by_tag[tag]:
            print(f'   UUID: {uuid}')
            print(f'   Title: {title}')
            if len(tags) > 1:
                other_tags = [t for t in tags if t != tag]
                print(f'   Other tags: {", ".join(other_tags)}')
            print()
    
    # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑ —Ç–µ–≥–æ–≤
    if profiles_without_tags:
        print(f'\nüìù Profiles without tags:')
        print('-' * 80)
        for uuid, title, tags in profiles_without_tags:
            print(f'   UUID: {uuid}')
            print(f'   Title: {title}')
            print()
    
    print('=' * 80)
    print(f'\n‚úÖ Total: {len(profiles)} profiles')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    chat_parser_profiles = [p for p in profiles if 'parserChat' in p.get('tags', [])]
    print(f'üì± Chat parser profiles (parserChat tag): {len(chat_parser_profiles)}')
    
except Exception as e:
    print(f'‚ùå Error: {e}')
    import traceback
    traceback.print_exc()

